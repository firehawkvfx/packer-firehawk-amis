#!/bin/bash

echo "Installing packages for AWS codebuild environment"

terraform_version="1.5.6"
terragrunt_version="0.36.0"
packer_version="1.11.2"
python_exe_version="python3.11"

set -e
set -x

SOURCE=${BASH_SOURCE[0]}   # resolve the script dir even if a symlink is used to this script
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR=$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)
cd $SCRIPTDIR

SUDOCMD="" # replace with text sudo to use elevated permissions

function log {
    local -r level="$1"
    local -r message="$2"
    local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo >&2 -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
    local -r message="$1"
    log "INFO" "$message"
}

function log_warn {
    local -r message="$1"
    log "WARN" "$message"
}

function log_error {
    local -r message="$1"
    log "ERROR" "$message"
}

function has_dnf {
    [[ -n "$(command -v dnf)" ]]
}

function has_yum {
    [[ -n "$(command -v yum)" ]]
}

function has_apt_get {
    [[ -n "$(command -v apt-get)" ]]
}

# $SUDOCMD yum install -y sudo
# # This fixes yum update problems with codebuild
# $SUDOCMD yum install -y yum-utils
# $SUDOCMD yum remove -y libuv-1.39.0-1.amzn2.x86_64
# $SUDOCMD yum clean all
# $SUDOCMD rm -rf /var/cache/yum
# $SUDOCMD yum update -y

log_info "Installing dependencies"

if has_apt_get; then
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git jq openssl $python_exe_version
    # LC_ALL=C && sudo pip install boto3
elif has_dnf; then
    dnf install -y git jq openssl $python_exe_version
    # LC_ALL=C && pip install boto3
elif has_yum; then
    yum install -y git jq openssl $python_exe_version
    # LC_ALL=C && pip install boto3
else
    log_error "Could not find apt-get or yum. Cannot install dependencies on this OS."
    exit 1
fi

curl -O https://bootstrap.pypa.io/get-pip.py # Install pip for py3.11
$python_exe_version get-pip.py
$python_exe_version -m pip --version
$python_exe_version -m pip install --upgrade pip
$python_exe_version -m pip install boto3 botocore # consider ansible? ansible

mkdir -p $SCRIPTDIR/tmp

#: Codebuild requires python 3.11 instead of python 3.7 used in the amis for ansible to work.

# curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
# sudo unzip awscliv2.zip
# sudo ./aws/install
# && $python_exe_version -m pip install --user typing_extensions --upgrade \

# $python_exe_version -m pip install --upgrade pip &&
#     $python_exe_version -m pip install --user "ansible==5.9.0" &&
#     $python_exe_version -m pip install --user boto3 botocore &&
#     export PATH=$PATH:/root/.local/bin &&
#     ansible --version

# ansible [core 2.12.6]

if terraform --version 2>/dev/null | grep -nq "Terraform v${terraform_version}"; then
    echo 'terraform already installed'
else
    wget https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_linux_amd64.zip -P /tmp/ --quiet # Get terraform
    $SUDOCMD unzip /tmp/terraform_${terraform_version}_linux_amd64.zip -d /tmp/
    $SUDOCMD mv /tmp/terraform /usr/local/bin/.
fi

wget https://releases.hashicorp.com/packer/${packer_version}/packer_${packer_version}_linux_amd64.zip -P /tmp/ --quiet # Get Packer
$SUDOCMD unzip /tmp/packer_${packer_version}_linux_amd64.zip -d /tmp/
$SUDOCMD mv /tmp/packer /usr/local/bin/.

if terragrunt --version 2>/dev/null | grep -nq "terragrunt version v${terragrunt_version}"; then
    echo 'Terragrunt already installed'
else
    wget https://github.com/gruntwork-io/terragrunt/releases/download/v${terragrunt_version}/terragrunt_linux_386 -P /tmp/ --quiet # Get Terragrunt
    $SUDOCMD mv /tmp/terragrunt_linux_386 /usr/local/bin/terragrunt
    $SUDOCMD chmod +x /usr/local/bin/terragrunt
fi

mkdir -p "$HOME/.ssh/tls" # The directory to store TLS certificates in.

# echo "Resizing EBS volume..."
# $SCRIPTDIR/deploy/firehawk-main/scripts/resize.sh
